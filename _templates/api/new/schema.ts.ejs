---
to: apps/api/lib/schemas/<%= h.changeCase.camel(model) %>.ts
---
// SPDX-License-Identifier: MIT
import { z } from 'zod';

// Common validation patterns
const IdSchema = z.string().cuid('Invalid ID format');
const EmailSchema = z.string().email('Invalid email format');
const NameSchema = z.string().min(1, 'Name is required').max(255, 'Name too long');
const SlugSchema = z.string().regex(/^[a-z0-9-]+$/, 'Invalid slug format');

// Matches Prisma model - adjust as needed
export const <%= model %> = z.object({
  id: IdSchema,
  name: NameSchema,
  description: z.string().max(1000, 'Description too long').nullable().optional(),
  email: EmailSchema.nullable().optional(),
  status: z.string().default('ACTIVE'),
  createdAt: z.date(),
  updatedAt: z.date(),
<% if (withSoftDelete) { %>  deletedAt: z.date().nullable(),<% } %>
});

export type <%= model %> = z.infer<typeof <%= model %>>;

// Input/Output schemas with strict validation
export const <%= model %>ListInput = z.object({
  page: z.number().int().positive().max(1000).optional().default(1),
  limit: z.number().int().positive().max(100).optional().default(20),
  search: z.string().min(1).max(255).optional(),
  sortBy: z.enum(['createdAt', 'updatedAt', 'name']).optional().default('createdAt'),
  sortOrder: z.enum(['asc', 'desc']).optional().default('desc'),
}).strict();

export const <%= model %>ListOutput = z.object({
  items: z.array(<%= model %>),
  pagination: z.object({
    page: z.number().int().positive(),
    limit: z.number().int().positive(),
    total: z.number().int().min(0),
    totalPages: z.number().int().min(0),
  }),
});

export const <%= model %>GetInput = z.object({
  id: IdSchema,
});

export const <%= model %>CreateInput = <%= model %>.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
<% if (withSoftDelete) { %>  deletedAt: true,<% } %>
}).strict(); // Prevent unknown properties

export const <%= model %>UpdateInput = z.object({
  id: IdSchema,
  data: <%= model %>CreateInput.partial().strict(),
});

export const <%= model %>UpdateData = <%= model %>CreateInput.partial().strict();

export const <%= model %>DeleteInput = z.object({
  id: IdSchema,
});

export const <%= model %>DeleteOutput = z.object({
  success: z.boolean(),
  id: IdSchema,
});

// Type exports
export type <%= model %>ListInput = z.infer<typeof <%= model %>ListInput>;
export type <%= model %>ListOutput = z.infer<typeof <%= model %>ListOutput>;
export type <%= model %>GetInput = z.infer<typeof <%= model %>GetInput>;
export type <%= model %>CreateInput = z.infer<typeof <%= model %>CreateInput>;
export type <%= model %>UpdateInput = z.infer<typeof <%= model %>UpdateInput>;
export type <%= model %>UpdateData = z.infer<typeof <%= model %>UpdateData>;
export type <%= model %>DeleteInput = z.infer<typeof <%= model %>DeleteInput>;
export type <%= model %>DeleteOutput = z.infer<typeof <%= model %>DeleteOutput>;

// Additional validation helpers
export const validate<%= model %>Name = (name: string) => NameSchema.safeParse(name);
export const validate<%= model %>Id = (id: string) => IdSchema.safeParse(id);