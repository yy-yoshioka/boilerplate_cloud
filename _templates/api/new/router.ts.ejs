---
to: apps/api/lib/routers/<%= h.camel(model) %>.router.ts
---
import { z } from 'zod';
import { publicProcedure, router } from '../trpc/server';
import { create<%= model %>Service } from '../services/<%= h.camel(model) %>.service';
import * as S from '../schemas/<%= h.camel(model) %>';
import { createStandardError } from '../utils/errors';

export const <%= h.camel(model) %>Router = router({
  list: publicProcedure
    .input(S.<%= model %>ListInput)
    .output(S.<%= model %>ListOutput)
    .query(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      return service.list(input);
    }),

  get: publicProcedure
    .input(S.<%= model %>GetInput)
    .output(S.<%= model %>)
    .query(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      const result = await service.get(input.id);
      if (!result) throw createStandardError('NOT_FOUND');
      return result;
    }),

  create: publicProcedure
    .input(S.<%= model %>CreateInput)
    .output(S.<%= model %>)
    .mutation(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      return service.create(input);
    }),

  update: publicProcedure
    .input(S.<%= model %>UpdateInput)
    .output(S.<%= model %>)
    .mutation(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      const result = await service.update(input.id, input.data);
      if (!result) throw createStandardError('NOT_FOUND');
      return result;
    }),
<% if (withSoftDelete) { %>
  delete: publicProcedure
    .input(S.<%= model %>DeleteInput)
    .output(S.<%= model %>DeleteOutput)
    .mutation(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      await service.softDelete(input.id);
      return { success: true, id: input.id };
    }),
<% } else { %>
  delete: publicProcedure
    .input(S.<%= model %>DeleteInput)
    .output(S.<%= model %>DeleteOutput)
    .mutation(async ({ input, ctx }) => {
      const service = create<%= model %>Service(ctx);
      await service.hardDelete(input.id);
      return { success: true, id: input.id };
    }),
<% } %>
});